<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-30</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.action = 1
global.confusion = false;
//0 = can't move
//1 = controllable
//2 = opening door
spd=9000
actiondoor = 0;
image_alpha=0

//create body parts
instance_create(x,y,obj_skull);
instance_create(x,y,obj_body);
instance_create(x,y,obj_leftarm);
instance_create(x,y,obj_rightarm);
instance_create(x,y,obj_legs);
instance_create(x,y,obj_core);


instance_create(x,y,obj_inventory);
instance_create(x,y,obj_drawitems);
instance_create(x,y,obj_particlecontrol);
instance_create(x,y,obj_gridcontrol);
instance_create(x,y,obj_stats);
instance_create(x,y,obj_crosshair);
instance_create(x,y,obj_gridcontrol);
instance_create(x,y,obj_dungeonControl);
instance_create(x,y,obj_music);
instance_create(x,y,obj_pointer)
instance_create(x,y,obj_scorecontrol)
instance_create(0,0,obj_parent_select)
instance_create(0,0,obj_damagescreen)
instance_create(0,0,obj_roomclear)
instance_create(0,0,obj_lightcontrol)




//create camera
instance_create(x,y,obj_camera);

mouse_dis=true;

//lives = 100
livescheck = 100

global.spawnpoint = spawnpoint1

global.firstTouch = false

originalmass=phy_mass
originaldamp=phy_linear_damping;

w = keyboard_check(ord('W'));
a = keyboard_check(ord('A'));
s = keyboard_check(ord('S'));
d = keyboard_check(ord('D'));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.confusion = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_position_x = global.spawnpoint.x
phy_position_y = global.spawnpoint.y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//update door's first touch status
if distance_to_object(obj_doorUp)&gt;5&amp;&amp;distance_to_object(obj_doorDown)&gt;5&amp;&amp;distance_to_object(obj_doorLeft)&gt;5&amp;&amp;distance_to_object(obj_doorRight)&gt;5
    {
    global.firstTouch=false
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.action != 0
{

if global.action=1{scr_move2(spd*(1+(global.killspree-1)/3));scr_facemouse()}
if global.action = 3
    {
    scr_move2(spd*(1+(global.killspree-1)/3))
    scr_turn(pushdir,20)
    phy_rotation = -direction
    }

if distance_to_point(mouse_x,mouse_y)&gt;30
    {
    mouse_dis = true;
    }
else
    {
    mouse_dis = false;
    }

if lives != livescheck
    {
    dmg=instance_create(x+random_range(-20,20),y+random_range(-20,20),obj_dmg)
    with(dmg)
        {
        damage = other.livescheck-other.lives;
        color = c_red;
        }
    livescheck = lives
    }

if global.action = 2
    {
    actiondoor += 1
    if actiondoor &gt;= 10
        {
        global.action = 1
        }
    }
    
//debug
if keyboard_check(ord('O'))
    global.action = 0
if keyboard_check(ord('P'))
    global.action = 1
    
//check door collisions
if distance_to_object(obj_doorRight)&lt;5
    door_Right = true;
else
    door_Right = false;
    
if distance_to_object(obj_doorUp)&lt;5
    door_Up = true;
else
    door_Up = false;
    
if distance_to_object(obj_doorDown)&lt;5
    door_Down = true;
else
    door_Down = false;
    
if distance_to_object(obj_doorLeft)&lt;5
    door_Left = true;
else
    door_Left = false;
    
//push block
pushblock = instance_nearest(x,y,obj_pushblock)
if distance_to_object(pushblock)&lt;3 &amp;&amp; keyboard_check(vk_shift)
    {
    if x&lt;pushblock.x
        {
        pushdir = 0
        }
    else if x&gt;pushblock.x+pushblock.sprite_width
        {
        pushdir = 180
        }
    else if y&lt;pushblock.y
        {
        pushdir=270
        }
    else if y&gt;pushblock.y+pushblock.sprite_height
        {
        pushdir=90
        }
    if pushdir == dir 
    with(pushblock)
        scr_applyforce(other.pushdir,30000000)
    global.action=3
    mp_grid_clear_all(global.grid);
    mp_grid_add_instances(global.grid,obj_parent_wall,1);
    mp_grid_add_instances(global.grid,obj_parent_playerwall,1);
    
    mp_grid_clear_all(global.grid64);
    mp_grid_add_instances(global.grid64,obj_parent_wall,1);
    mp_grid_add_instances(global.grid64,obj_parent_playerwall,1);
    
    mp_grid_clear_all(global.grid2);
    mp_grid_add_instances(global.grid2,obj_parent_wall,1);
    }
else 
    {
    if global.action = 3 &amp;&amp; !keyboard_check(vk_shift)
        global.action = 1
    if keyboard_check_pressed(ord('F'))//&amp;&amp; global.action != 2
        {
        global.action = 2
        actiondoor = 0
        }
    }
    
//death
if lives &lt;= 0
    {
    global.action = 0
    instance_create(x,y,obj_gameovermenu)
    phy_active = false
    depth = 1
    corpse = instance_create(x,y,obj_corpseperm)
    with(corpse)
        {
        spr = spr_skullcorpse
        img = 0
        scr_applyimpulse(irandom(360),irandom(1000))
        }
    corpse = instance_create(x,y,obj_corpseperm)
    with(corpse)
        {
        spr = spr_skullcorpse
        img = 1
        scr_applyimpulse(irandom(360),irandom(1000))
        }
    corpse = instance_create(x,y,obj_corpseperm)
    with(corpse)
        {
        spr = spr_skullcorpse
        img = 2
        scr_applyimpulse(irandom(360),irandom(1000))
        }
    repeat(5)
    {
    corpse = instance_create(x,y,obj_corpseperm)
    with(corpse)
        {
        spr = spr_skullcorpse
        img = 3
        scr_applyimpulse(irandom(360),irandom(1000))
        }
    }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parent_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//lol
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[5]=1
phy_position_x = global.spawnpoint.x
phy_position_y = global.spawnpoint.y





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>10</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
